модуль компилятор

импорт "стд::вывод"
импорт "стд::файлы"

импорт "трик/асд"
импорт "трик/основа"


фн (сб: Сборка) сделать реплику(мод: асд.Модуль): Модули {
    пусть настройка = мод.настройка^

    пусть нормализованный-путь := ""
    пусть ошибка: мб Строка := пусто

    основа.нормализовать путь(настройка.путь-импорта, нормализованный-путь,  ошибка)
	если ошибка # пусто {
		основа.добавить ошибку(настройка.поз, "ОКР-ОШ-ПУТЬ-ИМПОРТА", настройка.путь-импорта, ошибка^)
		вернуть Модули[]
	}

    пусть ф = файлы.новый файл(нормализованный-путь)
    если ~ ф.это папка?() {
		основа.добавить ошибку(настройка.поз, "ОКР-ИМПОРТ-НЕ-ПАПКА", нормализованный-путь, "")
		вернуть Модули[]
    }    
 
    пусть список = основа.подготовить исходники в папке(настройка.путь-импорта, нормализованный-путь)
	если длина(список) = 0 {
		основа.добавить ошибку(настройка.поз, "ОКР-ИМПОРТ-ПУСТАЯ-ПАПКА", настройка.путь-импорта, нормализованный-путь)
		вернуть Модули[]
	} 
    
	если список[0].ошибка # пусто {
		основа.добавить ошибку(настройка.поз, "ОКР-ОШ-ЧТЕНИЕ-ИСХОДНОГО", список[0].путь-файла, список[0].ошибка^.сообщение())
		вернуть Модули[]
	}    
    
    пусть модули =сб.разобрать исходники(ложь, список)
    
    цикл м среди модули {
        м.имя := мод.имя
    }

	вернуть модули
}
