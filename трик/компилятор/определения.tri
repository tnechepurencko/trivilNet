модуль компилятор

импорт "стд::вывод"
//импорт "стд::файлы"

импорт "трик/асд"
//импорт "трик/основа"

/*
тип defContext = класс {
	lines []Строка
}

фн (dc *defContext) f(покаmat Строка, args ...interface{}) {
	dc.lines = append(dc.lines, fmt.Sprintf(покаmat, args...))
}

фн makeDef(m асд.Модуль, folder Строка) {

	пусть dc = &defContext{
		lines: make([]Строка, 0),
	}

	асд.CurHost = m

	dc.f("модуль $;\n", m.Name)

	пока _, d := range m.Decls {
		x, ok := d.(*асд.ТипDecl)
		если ok & x.Exported {
			dc.typeDecl(x)
		}
	}

	пока _, d := range m.Decls {
		x, ok := d.(*асд.Function)
		если ok & x.Exported {
			dc.фнtion(x, ложь)
		}
	}

	dc.f("")

	//fmt.Println(dc.lines)
	writeFile(folder, m.Name, ".def", dc.lines)

	асд.CurHost = пусто
}

фн writeFile(folder, name, ext Строка, lines []Строка) {

	пусть filename = filepath.Join(folder, name+ext)

	пусть out = Строкаs.Join(lines, "\n")

	пусть err = os.WriteFile(filename, []byte(out), 0755)

	если err # пусто {
		panic("Ошибка записи файла " + filename + ": " + err.Error())
	}
	вывод.ф("записано $;\n", filename)
}

/ *
фн (dc *defContext) decl(d асд.Описание) {
	выбор x := d.(type) {
	когда *асд.Function:
		dc.фнtion(x)
	другое
		// ничего
	}
}
* /

фн (dc *defContext) фнtion(x *асд.Function, methods Лог) {
	пусть recv = ""
	если x.Recv # пусто {
		если ~methods {
			вернуть
		}
		recv = fmt.Sprintf("($;: $;) ", x.Recv.Name, dc.typeName(x.Recv.Typ))
	}

	пусть ft = x.Typ.(*асд.FuncType)

	пусть resTyp = ""
	если ft.ReturnTyp # пусто {
		resTyp = fmt.Sprintf(": $;", dc.typeName(ft.ReturnTyp))
	}

	пусть params = make([]Строка, 0)
	пока _, p := range ft.Params {
		params = append(params, fmt.Sprintf("$;: $;", p.Name, dc.typeName(p.Typ)))
	}

	dc.f("фн $;$;($;)$;", recv, x.Name, Строкаs.Join(params, ", "), resTyp)
}

//== типы

фн (dc *defContext) typeName(t асд.Тип) Строка {
	вернуть асд.ТипName(t)
}

фн (dc *defContext) typeDecl(td *асд.ТипDecl) {
	выбор xt := асд.UnderType(td.Typ).(type) {
	когда *асд.ClassType:
		dc.classDecl(td, xt)
	другое
		dc.f("тип $; = $;", td.Name, dc.typeName(td.Typ))
	}
}

фн (dc *defContext) classDecl(td *асд.ТипDecl, x *асд.ClassType) {
	dc.f("тип $; = класс{}", td.Name)

	пока _, m := range x.Methods {
		dc.фнtion(m, истина)
	}
	dc.f("")
}
*/