модуль компилятор

импорт "стд::вывод"

импорт "трик/асд"
импорт "трик/основа"
импорт "трик/асд/асд-показ"
импорт "трик/компилятор/словарь-импорты"

тип Сборка = класс {
    главный: мб асд.Модуль := пусто
    
	импортированные = словарь-импорты.Словарь{} // [Строка]Модуль

	//testModulePath Строка // импорт путь для тестируемого модуля

	// упорядоченный список для обработки
	// головной модуль - в конце
	//list   []*асд.Модуль
	//status map[*асд.Модуль]int

	// Путь к папке для модуля, только для создания интерфейса модуля
	//folders map[*асд.Модуль]Строка
}

тип Строки = []Строка
тип Исходники = основа.Исходники
тип Модули = []асд.Модуль

фн компилировать*(исходный-путь: Строка) {
    //вывод.ф("компилировать: $;\n", исходный-путь)
    
    пусть список = основа.подготовить исходники по пути(исходный-путь)
    
    надо основа.число ошибок() = 0 иначе вернуть        
    
    пусть исх = список[0]
    надо исх.ошибка = пусто
    иначе {
        // TODO: общая ошибка должна быть уже выдана
        вывод.ф("$;\n", исх.ошибка^.сообщение())
        вернуть
    }

	пусть сб = Сборка{
		//imported: make(map[string]*ast.Module),
		//folders:  make(map[*ast.Module]string),
	}

    сб.главный := сб.разобратьМодуль(истина, список)
   
    надо основа.число ошибок() = 0 иначе вернуть   
    
//    вывод.ф("=== АСД:\n")
//    вывод.ф("$;\n", асд-показ.с-модуль(мод))

	//cc.build()
}