модуль асд-показ

импорт "стд::вывод"

импорт "стд::строки"
импорт "трик/асд"

фн с-описания(мод: асд.Модуль): Строка {

    пусть список = Строки[выделить: длина(мод.описания)]
    
    цикл описание среди мод.описания {

		выбор пусть оп: тип описание {
		когда асд.ОписаниеТипа:
            список.добавить(с-описание-типа(оп))   
		когда асд.ОписаниеКонстанты:
            список.добавить(с-описание-константы(оп))             
		когда асд.ОписаниеПеременной:
            список.добавить(с-описание-переменной(оп))
		когда асд.Функция:
            список.добавить(с-описание-функции(оп))
		другое
            авария("с-описание: неизвестный тип")
		}
	}
   
    вернуть строки.ф("$;", строки.соединить(" ", список...))
}

фн экспорт(о: асд.Описание): Строка {
    надо о.экспорт иначе вернуть ""
    вернуть "*"
}

фн с-описание-типа(тек: асд.ОписаниеТипа): Строка {
    вернуть строки.ф("(тип \"$;$;\" $;)", тек.имя, экспорт(тек), с-определение-типа(тек.Т))
}

фн с-описание-константы(тек: асд.ОписаниеКонстанты): Строка {
    вернуть строки.ф("(конст \"$;$;\" $;  $;)", тек.имя, экспорт(тек), с-указ-типа(тек.Т), с-выражение(тек.значение^))
}

фн с-описание-переменной(тек: асд.ОписаниеПеременной): Строка {
    пусть иниц := ""
    если тек.задать-позже {
        иниц := "позже"
    } иначе {
        иниц := с-выражение(тек.значение^)
    }
    пусть не-изм := ""
    если тек.одно-присваивание {
        не-изм := " НеИзм"
    }

    вернуть строки.ф("(пусть \"$;$;\"$; $;  $;)", тек.имя, экспорт(тек), не-изм, с-указ-типа(тек.Т), иниц)
}

фн с-описание-функции(тек: асд.Функция): Строка {
    пусть получатель = ""
    
    пусть тф = тек.Т(:асд.ТипФункция)
    
    пусть параметры = ""
    пусть результат := ""
    если тф.Т-вернуть # пусто {
        результат := с-указ-типа(тф.Т-вернуть)
    }

    пусть тело := ""
    выбор {
    когда тек.тело # пусто: тело := с-список-операторов(тек.тело^)
    когда тек.внешняя: тело := "\"@внеш\""
    }

    вернуть строки.ф("(фн $; \"$;$;\" $;$; $;)", получатель, тек.имя, экспорт(тек), параметры, результат, тело)
}