// Области действия
модуль асд

импорт "стд::вывод"

тип Область* = класс {
	выше*: мб Область = пусто
	имена*: Словарь = позже
}

пусть универсум = Область{
    имена: Словарь{}
}

// Встроенные типы, видимые разработчику
пусть тБайт = добавить встроенный("Байт")
пусть тЦел64 = добавить встроенный("Цел64")
пусть тВещ64 = добавить встроенный("Вещ64")
пусть тСлово64 = добавить встроенный("Слово64")
пусть тЛог = добавить встроенный("Лог")
пусть тСимвол = добавить встроенный("Символ")
пусть тСтрока = добавить встроенный("Строка")
пусть тСтрока8 = добавить встроенный("Строка8")

// Встроенные типы, не видимые разработчику
пусть тТегСлово  = ТипВстроенный{поз: 0, имя: "ТегСлово" }
пусть тНетЗначения = ТипВстроенный{поз: 0, имя: "нет значения" }
пусть тПусто =  ТипВстроенный{поз: 0, имя: "ТипПусто" } //

фн ТБайт*(): ТипВстроенный { вернуть тБайт }
фн ТЦел64*(): ТипВстроенный { вернуть тЦел64 }
фн ТВещ64*(): ТипВстроенный { вернуть тВещ64 }
фн ТСлово64*(): ТипВстроенный { вернуть тСлово64 }
фн ТЛог*(): ТипВстроенный { вернуть тЛог }
фн ТСимвол*(): ТипВстроенный { вернуть тСимвол }
фн ТСтрока*(): ТипВстроенный { вернуть тСтрока }
фн ТСтрока8*(): ТипВстроенный { вернуть тСтрока8 }

фн ТипТегСлово*(): ТипВстроенный { вернуть тТегСлово }
фн ТипНетЗначения*(): ТипВстроенный { вернуть тНетЗначения }
фн ТипПусто*(): ТипВстроенный { вернуть тПусто }

// Стандартные функции
конст * (
	СтдДлина  = "длина"
	СтдТег      = "тег"
	СтдНечто  = "нечто"
)

// Методы вектора
конст * (
	ВекторДобавить = "добавить"
	ВекторВыделить = "выделить" // метод не сделан, используется в композите вектора
)

//пусть методыВектора = vectorMethods map[Строка]*StdFunction

//=== добавление в универсум

фн добавить встроенный(имя: Строка): ТипВстроенный {
    пусть т = ТипВстроенный{
        поз: 0,
        имя: имя
    }

    пусть оп = ОписаниеТипа{поз: 0}
    оп.имя := имя
    оп.Т := т
    
    универсум.имена.добавить(имя, оп)

	вернуть т
}

фн добавить константу(имя: Строка, Т: Тип, значение: Выражение) {
	пусть оп = ОписаниеКонстанты{
        поз: 0,
        имя: имя,
        Т: Т,
        значение: значение,
	}

    универсум.имена.добавить(имя, оп)
}

фн добавить стандартную функцию(имя: Строка) {
    пусть оп = СтдФункция{
        поз: 0,
        имя: имя,
        Т: тНетЗначения, // нужно ли это?
    }

    универсум.имена.добавить(имя, оп)
}

/*
фн addVectorMethod(name Строка) {
	пусть f = &StdFunction{Method: истина}
	f.Typ = VoidType
	f.Name = name

	vectorMethods[name] = f
}

//== методы для всех векторов

фн VectorMethod(name Строка) *StdFunction {
	f, ok := vectorMethods[name]
	если ok {
		вернуть f
	}
	вернуть nil
}
*/

фн новая область*(выше: Область): Область {
	вернуть Область{
		выше: выше,
		имена: Словарь{},
	}
}

фн показать области*(заголовок: Строка, о: Область) {
	если заголовок # "" {
        вывод.ф("$;\n", заголовок)
	}

	пусть глубина := 0
	пока истина {
		глубина++
		вывод.ф("область $; ===>\n", глубина)
        
        пусть и = о.имена.начать()
        пока и.элемент? # пусто {
            вывод.ф(" $;", и.элемент?^.ключ)
            и.следующий()
		}
		если о.имена.число элементов() > 0 {
            вывод.ф("\n")
		}

        надо о.выше # пусто иначе прервать
		о := о.выше^
	}
	вывод.ф("<=== завершение областей\n")
}

вход {
    добавить константу("ложь", тЛог, ЛогЛитерал{поз: 0, значение: ложь})
    добавить константу("истина", тЛог, ЛогЛитерал{поз: 0, значение: истина})

    добавить константу("пусто", тПусто, Литерал{поз: 0, вид: Лит-Пусто})

	добавить стандартную функцию(СтдДлина)
	добавить стандартную функцию(СтдТег)
	добавить стандартную функцию(СтдНечто)

/*

	vectorMethods = make(map[Строка]*StdFunction)
	addVectorMethod(VectorAppend)
	//addVectorMethod(VectorFill)

*/    
    //показать области("", универсум)
}