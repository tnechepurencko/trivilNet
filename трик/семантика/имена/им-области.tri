модуль имена

импорт "стд::вывод"
импорт "стд::строки"

импорт "трик/асд"
импорт "трик/основа"

фн добавить в область(имя: Строка, оп: асд.Описание, область: асд.Область) {
	
    пусть эл = область.имена.найти(имя)
	если эл # пусто {
        пусть уже = эл^.значение 
        если ~ (уже типа асд.ОшОписание) {
			основа.добавить ошибку(уже.поз, "СЕМ-УЖЕ-ОПИСАНО", имя)
		}
		вернуть
	}
    область.имена.добавить(имя, оп)
}

/*
фн findInScopes(scope асд.Scope, name Строка, pos int) ast.Decl {

	пусть cur = scope

	пока {
		если cur = nil {
			//ast.ShowScopes("not found "+name, scope)
			вернуть nil
		}

		d, ok := cur.Names[name]
		если ok {
			вернуть d
		}

		cur = cur.Outer
	}
}

// Всегда возвращает объект, возможно InvalidDesc
фн lookInScopes(scope асд.Scope, name Строка, pos int) ast.Decl {

	пусть d = findInScopes(scope, name, pos)
	если d # nil {
		вернуть d
	}
	основа.добавить ошибку(pos, "СЕМ-НЕ-НАЙДЕНО", name)
	пусть inv = &ast.InvalidDecl{
		DeclBase: ast.DeclBase{Pos: pos, Name: name},
	}
	добавить в область(name, inv, scope)
	вернуть inv
}
*/
//== проверить импорт

фн имя для проверки импорта (мод: асд.Модуль, №: Цел64): Строка {
	вернуть строки.ф("$;$;", №, мод.имя) 
}

// Проверяет, что использованный модуль импортирован в исходном файле
фн (им: Имена) проверить что импортирован(мод: асд.Модуль, поз: Цел64) {

    пусть № = основа.номер исходника(поз)

    пусть эл = им.мод.область.имена.найти(имя для проверки импорта(мод, №))
	если эл = пусто {
        пусть исх = основа.исходник по позиции(поз)
		основа.добавить ошибку(поз, "СЕМ-МОДУЛЬ-НЕ-ИМПОРТИРОВАН", мод.имя, исх.имя-файла)
		// не повторять ошибку
        им.мод.область.имена.добавить(имя для проверки импорта(мод, №), мод)
	}
}