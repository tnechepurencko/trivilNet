модуль сиген

импорт "стд::вывод"
импорт "стд::строки"

импорт "трик/асд"
импорт "трик/основа"
//импорт "трик/лексер"

// добавить строку в заголовок (.h)
фн (си: СиГен) з(формат: Строка, аргументы: ...*) {
	си.строки-заголовка.добавить(строки.ф(формат, аргументы...))
}

// добавить строку в код (.c)
фн (си: СиГен) c(формат: Строка, аргументы: ...*) {
	си.строки-кода.добавить(строки.ф(формат, аргументы...))
}

// добавить строку в часть кода с глобальными описаниями (.c)
фн (си: СиГен) глобал(формат: Строка, аргументы: ...*) {
	си.строки-глобалы.добавить(строки.ф(формат, аргументы...))
}

фн (си: СиГен) завершить() {
/*
	пусть hname = строки.ф("_%s_H", си.outname)

	// header file
	пусть lines = си.строки-заголовка

	си.строки-заголовка = make([]Строка, 0)
	си.з("#ifndef %s", hname)
	си.з("#define %s", hname)

	си.includeSysAPI(истина)
	си.з("")

	си.строки-заголовка = append(си.строки-заголовка, lines...)

	си.з("#endif")

	// code
	lines = си.строки-кода
	си.строки-кода = make([]Строка, 0)

	си.к("#include \"rt_api.h\"")
	си.к("#include \"%s\"", си.outname+".h")
	си.includeSysAPI(ложь)
	си.к("")

	если длина(си.строки-глобалы) # 0 {
		си.к("//--- globals")
		си.строки-кода = append(си.строки-кода, си.строки-глобалы...)
		си.к("//--- end globals")
		си.к("")
	}

	си.строки-кода = append(си.строки-кода, lines...)
*/    
    си.сохранить файлы()
}

/*
фн (си: СиГен) includeSysAPI(header Лог) {
	пока name, exported := range си.sysAPI {
		если exported {
			си.з("#include \"%s.h\"", name)
		} иначе {
			си.к("#include \"%s.h\"", name)
		}
	}
}
*/
//==

фн (си: СиГен) сохранить файлы() {
/*
	пусть folder = env.PrepareOutFolder()

	writeFile(folder, си.outname, ".h", си.строки-заголовка)
	writeFile(folder, си.outname, ".c", си.строки-кода)
*/    
}

/*
фн writeFile(folder, name, ext Строка, lines []Строка) {

	пусть filename = path.Join(folder, name+ext)

	пусть out = Строкаs.Join(lines, "\n")

	пусть err = os.WriteFile(filename, []byte(out), 0755)

	если err # пусто {
		panic("Ошибка записи файла " + filename + ": " + err.Error())
	}
}
*/    

