модуль сиген

импорт "стд::вывод"
импорт "стд::строки"
импорт "стд::файлы"

импорт "трик/асд"
импорт "трик/основа"
//импорт "трик/лексер"

// добавить строку в заголовок (.h)
фн (си: СиГен) з(формат: Строка, аргументы: ...*) {
	си.строки-заголовка.добавить(строки.ф(формат, аргументы...))
}

// добавить строку в код (.c)
фн (си: СиГен) к(формат: Строка, аргументы: ...*) {
	си.строки-кода.добавить(строки.ф(формат, аргументы...))
}

// добавить строку в часть кода с глобальными описаниями (.c)
фн (си: СиГен) глобал(формат: Строка, аргументы: ...*) {
	си.строки-глобалы.добавить(строки.ф(формат, аргументы...))
}

фн позиция в строку(позиция: Цел64): Строка {
    пусть №-строки := 0
    пусть №-символа := 0
    пусть исх = основа.распаковать позицию(позиция, №-строки, №-символа)
    
	вернуть строки.ф("\"$;/$;:$;:$;\"", исх.исходный-путь, исх.имя-файла, №-строки, №-символа)
}

//==== завершение

фн (си: СиГен) завершить() {

	пусть hname = строки.ф("_$;_H", си.мод-си-имя)

	// header file
	пусть заголовок = Строки[]
    
    заголовок.добавить(строки.ф("#ifndef $;", hname))
    заголовок.добавить(строки.ф("#define $;", hname))
	си.добавить SysAPI(заголовок, истина)
    заголовок.добавить("")
    заголовок.добавить(си.строки-заголовка...)   
    заголовок.добавить("#endif")    

	// code
	пусть код = Строки[]

	код.добавить("#include \"rt_api.h\"")
	код.добавить(строки.ф("#include \"$;.h\"", си.мод-си-имя))
	си.добавить SysAPI(код, ложь)
	код.добавить("")

	если длина(си.строки-глобалы) # 0 {
		код.добавить("//--- globals")
		код.добавить(си.строки-глобалы...)
		код.добавить("//--- end globals")
		код.добавить("")
	}

	код.добавить(си.строки-кода...)
   
    си.сохранить файлы(заголовок, код)
}

фн (си: СиГен) добавить SysAPI(список: Строки, экспорт: Лог) {

   пусть и = си.sysAPI.начать()
    пока и.элемент? # пусто {
        если и.элемент?^.значение = экспорт {
			список.добавить(строки.ф("#include \"$;.h\"", и.элемент?^.ключ))
        }
        и.следующий()
    }
}

//====

фн (си: СиГен) сохранить файлы(заголовок: Строки, код: Строки) {
	пусть папка = основа.подготовить папку кода()
	записать файл(папка, си.мод-си-имя, ".h", заголовок)
	записать файл(папка, си.мод-си-имя, ".c", код)
}

тип Байты = []Байт

фн записать исполняемый файл(папка: Строка, имя-файла: Строка, расширение: Строка, список: Строки) {
    записать файл с правами(папка, имя-файла, расширение, список, 493) // 0755 восьмеричное
}

фн записать файл(папка: Строка, имя-файла: Строка, расширение: Строка, список: Строки) {
    записать файл с правами(папка, имя-файла, расширение, список, 420) // 0644 восьмеричное
}

фн записать файл с правами(папка: Строка, имя-файла: Строка, расширение: Строка, список: Строки, права: Цел64) {

    пусть путь-файла = файлы.собрать путь(папка, строки.собрать( имя-файла, расширение))

    пусть ф = файлы.новый файл(путь-файла)

    ф.записать(строки.соединить("\n", список...)(:Байты))
    если ф.ошибка?() # пусто {
        авария(строки.ф("$;", ф.ошибка?()^. сообщение()))
    }

    ф.установить права(права)
}
