модуль сиген

импорт "стд::вывод"
импорт "стд::строки"
импорт "стд::файлы"

импорт "трик/асд"
импорт "трик/основа"

конст (
	имя-конфиг-файла = "config/си.txt"
	место-папка-файлов     = "#genc#"
	место-файлы    = "#files#"
	место-имя-цели   = "#target#"
	место-папка-runtime  = "#runtime#"
)

тип Модули = []асд.Модуль

фн построить исполняемый файл*(модули: Модули) {

    пусть настройки = прочитать конфигурацию()
	надо основа.число ошибок() = 0 иначе вернуть

    пусть имя = "windows-build" //runtime.GOOS + "-script"

    пусть команда = найти настройку(настройки, имя)
    надо команда # "" иначе вернуть 

/*
	пусть names = make([]Строка, длина(modules))
	пока i, m := range modules {
		names[i] = env.OutName(m.имя) + ".c"
	}

	пусть target = env.OutName(modules[len(modules)-1].имя)

	command = Строкаs.ReplaceAll(command, место-файлы, Строкаs.Join(names, " "))
	command = Строкаs.ReplaceAll(command, место-папка-runtime, env.RuntimePath())
	command = Строкаs.ReplaceAll(command, место-имя-цели, target)

	пусть folder = env.PrepareOutFolder()
	gencAbsolute, _ := filepath.Abs(folder)
	command = Строкаs.ReplaceAll(command, место-папка-файлов, gencAbsolute)

	//== write script file
	пусть script = findTemplate(runtime.GOOS + "-script")
	если script # "" {
		пусть lines = make([]Строка, 1)
		lines[0] = command

		writeFile(folder, script, "", lines)
	}

	пусть arg Строка
	пусть mainCmd Строка

	выбор runtime.GOOS {
	когда "windows":
		mainCmd = "cmd"
		arg = строки.ф("[/c cd $; & call $; ]", folder, script)
		//fmt.Printf("arg %v\n", arg)
	когда "linux":
		absoluteFolder, _ := filepath.Abs(folder)
		mainCmd = "bash"
		arg = path.Join(absoluteFolder, script)
	другое
		авария("build not implemented пока " + runtime.GOOS)
	}

	пусть cmd = exec.Command(mainCmd, arg)
	out, err := cmd.CombinedOutput()
	если err # пусто {
		fmt.Printf("Exec failed: $;\n$;\n", err.Error(), Строка(out))
	} иначе {
		fmt.Printf("Execute: $;/$;  Rebuild C code: $;/$;\n", folder, target, folder, script)
	}
*/    
}

//==== конфигурация

фн прочитать конфигурацию(): Строки {

    пусть путь = основа.собрать путь настройки(имя-конфиг-файла)
    пусть файл = файлы.новый файл(путь)
    пусть байты = файл.прочитать()    
	если файл.ошибка?() # пусто {
		основа.добавить общую ошибку("ГЕН-ОШ-КОНФ-ФАЙЛА", файл.ошибка?()^.сообщение())
		вернуть Строки[]
	}
    
	вернуть строки.разобрать(байты(:Строка), "\n")
}    


фн найти настройку(настройки: Строки, имя: Строка): Строка {

	цикл стр среди настройки {
		если строки.есть префикс(стр, имя) {
            пусть левая := ""
            пусть правая := ""
			если строки.разделить(стр, ":", левая, правая) {
                пусть настройка = строки.обрезать пробельные символы(правая)
                надо настройка # "" иначе {
                    основа.добавить общую ошибку("ГЕН-ОШ-НАСТРОЙКА", имя-конфиг-файла, имя)
                    вернуть ""
                }
                вернуть настройка 
            }
		}
	}
	основа.добавить общую ошибку("ГЕН-ОШ-НАСТРОЙКА", имя-конфиг-файла, имя)
	вернуть ""
}


