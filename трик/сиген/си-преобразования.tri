модуль сиген

импорт "стд::вывод"
импорт "стд::строки"

импорт "трик/асд"

фн (си: СиГен) преобразование(тек: асд.Преобразовать): Строка {

    если асд.полиморфный тип?(тек.Л.Т^) {
		вернуть си.преобразовать полиморфный(тек)
    }

	пусть си-выр = си.выражение(тек.Л)
	если тек.сделано {
		вернуть си-выр
	}

	пусть цель = асд.основа(тек.цель)^

	пусть исходный = асд.основа(тек.Л.Т^)^
    
	выбор  {
	когда асд.байт?(цель):
		вернуть си.преобразовать встроенный(си-выр, исходный(:асд.ТипВстроенный), асд.ТБайт())
	когда асд.цел64?(цель):
		если асд.байт?(исходный) | асд.символ?(исходный) {
			вернуть си.привести встроенный(си-выр, асд.ТЦел64())
		} иначе {
			вернуть си.преобразовать встроенный(си-выр, исходный(:асд.ТипВстроенный), асд.ТЦел64())
		}
	когда асд.слово64?(цель):
		если асд.байт?(исходный) | асд.символ?(исходный) {
			вернуть си.привести встроенный(си-выр, асд.ТСлово64())
		} иначе {
			вернуть си.преобразовать встроенный(си-выр, исходный(:асд.ТипВстроенный), асд.ТСлово64())
		}
	когда асд.вещ64?(цель):
		вернуть си.привести встроенный(си-выр, асд.ТВещ64())
	когда асд.символ?(цель):
		если  асд.байт?(исходный) | асд.символ?(исходный) {
			вернуть си.привести встроенный(си-выр, асд.ТСимвол())
		} иначе {
			вернуть си.преобразовать встроенный(си-выр, исходный(:асд.ТипВстроенный), асд.ТСимвол())
		}
	когда асд.строка?(цель):
		вернуть си.преобразовать к строке(си-выр, асд.основа(тек.Л.Т^)^)
	когда асд.строка8?(цель):
		вернуть си-выр
	когда асд.тип-вектора?(цель):
		вернуть си.преобразовать к вектору(си-выр, исходный, цель(:асд.ТипВектор))
	когда асд.тип-класса?(цель):
		вернуть си.преобразовать к классу(си-выр, тек.цель, тек.поз)
	другое
		авария(строки.ф("ni $тип; '$;'", цель, асд.изображение-типа(тек.цель)))
	}
}

// Использует функцию rt_convert
фн (си: СиГен) преобразовать встроенный(си-выр: Строка, исходный: асд.ТипВстроенный, цель: асд.ТипВстроенный): Строка {
	вернуть строки.ф("$;$;_to_$;($;)", rt_convert, имя встроенного-типа(исходный), имя встроенного-типа(цель), си-выр)
}

// Использует приведение типа
фн (си: СиГен) привести встроенный(си-выр: Строка, цель: асд.ТипВстроенный): Строка {
	вернуть строки.ф("($;)($;)", имя встроенного-типа(цель), си-выр)
}

фн (си: СиГен) преобразовать к строке(си-выр: Строка, исходный: асд.Тип): Строка {

	если асд.символ?(исходный) {
		вернуть си.преобразовать встроенный(си-выр, асд.ТСимвол(), асд.ТСтрока())
	} иначе если асд.строка8?(исходный) {
		вернуть си-выр
	}

	если ~ асд.тип-вектора?(исходный) {
		авария("ni")
	}

	пусть тв = исходный(:асд.ТипВектор)
	пусть т-эл = асд.основа(тв.Т-элемента)^

	если асд.байт?(т-эл) {
		вернуть строки.ф("$;$;_to_$;($;)", rt_convert, "Bytes", имя встроенного-типа(асд.ТСтрока()), си-выр)
	} иначе если асд.символ?(т-эл) {
		вернуть строки.ф("$;$;_to_$;($;)", rt_convert, "Symbols", имя встроенного-типа(асд.ТСтрока()), си-выр)
	} иначе {
		авария("ni")
	}
}

фн (си: СиГен) преобразовать к вектору(си-выр: Строка, исходный: асд.Тип, цель: асд.ТипВектор): Строка {

	если асд.строка?(исходный) {
        пусть т-эл = асд.основа(цель.Т-элемента)^
        
		если асд.байт?(т-эл) {
			вернуть строки.ф("$;$;_to_$;($;)", rt_convert, имя встроенного-типа(асд.ТСтрока()), "Bytes", си-выр)
		} иначе если асд.символ?(т-эл) {
			вернуть строки.ф("$;$;_to_$;($;)", rt_convert, имя встроенного-типа(асд.ТСтрока()), "Symbols", си-выр)
		} иначе {
			авария("ni")
		}
	} иначе если  асд.символ?(исходный) {
		вернуть строки.ф("$;$;_to_$;($;)", rt_convert, имя встроенного-типа(асд.ТСимвол()), "Bytes", си-выр)
	} иначе {
		авария("ni")
	}
}

фн (си: СиГен) преобразовать к классу(си-выр: Строка, цель: асд.Тип, поз: Цел64): Строка {
	пусть имя-типа = си.указание-типа(цель)

	вернуть строки.ф("(($;)$;($;, $;$;, $;))", 
        имя-типа, 
        rt_checkClassType, 
        си-выр, 
        имя-типа, суффикс-адрес-дескриптора,
        позиция в строку(поз))
}

//==== полиморфный тип

фн (си: СиГен) преобразовать полиморфный(тек: асд.Преобразовать): Строка {
    пусть тег := ""
    пусть значение := ""
    си.пара тег-значение(тек.Л, тег, значение)

    выбор пусть цель: тип асд.основа(тек.цель)^ {
    когда асд.ТипКласс:
    
        вернуть строки.ф("$;$;_to_$;($;, $;,  $;$;, $;)", 
            rt_convert, 
            имя встроенного-типа(асд.ТипПолиморфный()), 
            "Class", 
            тег,
            значение,
            си.указание-типа(тек.цель),  суффикс-адрес-дескриптора,
            позиция в строку(тек.поз))
    когда асд.ТипВектор:
        авария("не сделано")
    когда асд.ТипВстроенный:
        вернуть строки.ф("$;$;_to_$;($;, $;, $;)", 
            rt_convert, 
            имя встроенного-типа(асд.ТипПолиморфный()), 
            имя встроенного-типа(цель), 
            тег,
            значение,
            позиция в строку(тек.поз))
    другое
        авария(строки.ф("не сделано $тип;", тек.цель))
    }
}

//==== осторожное преобразование

фн (си: СиГен) осторожное преобразование(тек: асд.Преобразовать): Строка {

	пусть си-выр = си.выражение(тек.Л)
	если тек.сделано {
		вернуть си-выр
	}

	пусть цель = асд.основа(тек.цель)^
	пусть исходный = асд.основа(тек.Л.Т^)^

	выбор {
	когда асд.цел64?(цель):
		вернуть строки.ф("(($;)$;).i", rt_cast_union, си-выр)
	когда асд.вещ64?(цель):
		вернуть строки.ф("(($;)$;).f", rt_cast_union, си-выр)
	когда асд.слово64?(цель):
		вернуть си.привести к слово64(си-выр, исходный)
	когда  асд.слово64?(исходный) & асд.ссылочный тип?(цель):
		//TODO: проверить указатель и тег
		вернуть строки.ф("($;)(($;)$;).a", си.указание-типа(тек.цель), rt_cast_union, си-выр)
	другое
		авария(строки.ф("ni $тип; '$;'", цель, асд.изображение-типа(тек.цель)))
	}
}

// Приведение без изменение битового представления
фн (си: СиГен) привести к слово64(си-выр: Строка, т: асд.Тип): Строка {

	т := асд.основа(т)^

	выбор {
	когда асд.слово64?(т), асд.байт?(т), асд.символ?(т), асд.лог?(т):
		вернуть си-выр
	когда асд.цел64?(т):
		вернуть строки.ф("(($;)($;)$;).w", rt_cast_union, имя встроенного-типа(асд.ТЦел64()), си-выр)
	когда асд.ссылочный тип?(т):
		вернуть строки.ф("(($;)(void*)$;).w", rt_cast_union, си-выр)
	другое
		//не верно: вернуть строки.ф("(($;)$;).w", rt_cast_union, си-выр)
        вернуть строки.ф("($;)$;", имя встроенного-типа(асд.ТСлово64()), си-выр)
	}
}
