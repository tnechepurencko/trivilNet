модуль парсер

импорт "стд::вывод"
импорт "трик/асд"
импорт "трик/лексер"
импорт "трик/основа"

фн (п: Парсер) описание функции(): асд.Функция {


	п.нужна лексема(лексер.ФН)
    
    пусть получатель: мб асд.Параметр := пусто

	если п.лек = лексер.КРУГ-Л { // получатель
		п.взять()

		получатель := асд.Параметр{
            поз: п.поз
		}

		получатель^.имя := п.идент()
		п.нужна лексема(лексер.ДВОЕТОЧИЕ)
		получатель^.Т := п.указание-типа()

		п.нужна лексема(лексер.КРУГ-П)
	}

	пусть ф = асд.Функция{
		поз: п.поз, // позиция имени
        получатель: получатель,
	}

    ф.имя := п.идент()
    ф.экспорт := п.экспорт()
	ф.Т := п.тип-функция()

	если п.лек = лексер.МОДИФИКАТОР {
		пусть мф = п.модификатор()

		выбор мф.имя {
		когда "@внеш":
			ф.внешняя := истина

		другое
			п.ошибка("ПАР-ОШ-МОДИФИКАТОР", мф.имя)
		}

		ф.модификатор := мф
	} иначе {
        ф.список := п.список операторов()
	}

	вернуть ф
}

фн (п: Парсер) тип-функция(): асд.ТипФункция {

	пусть тф = асд.ТипФункция{
		поз: п.поз,
	}

	п.нужна лексема(лексер.КРУГ-Л)

	п.параметры(тф)

	п.нужна лексема(лексер.КРУГ-П)

	если п.лек = лексер.ДВОЕТОЧИЕ {
		п.взять()
		тф.Т-вернуть = п.указание-типа()
	}

	вернуть тф
}

/* не используется:
пусть до-параметра = собрать множество(
    лексер.КОН-ФАЙЛ, 
    лексер.КРУГ-П, 
    лексер.ЗАПЯТАЯ, 
)
*/

фн (п: Парсер) параметры(тф: асд.ТипФункция) {

	пока п.лек # лексер.КРУГ-П & п.лек # лексер.КОН-ФАЙЛ {

		пусть парам = асд.Параметр{
			поз: п.поз,
		}

		парам.имя = п.идент()

		п.нужна лексема(лексер.ДВОЕТОЧИЕ)

		пусть вариативный = п.лек = лексер.ТРОЕТОЧИЕ
		пусть вари-поз = п.поз
		если вариативный {
			п.взять()
		}

		если п.лек = лексер.УМНОЖИТЬ {
//!!!			param.Typ = асд.TagPairType
			п.взять()

		} иначе {
			парам.Т = п.указание-типа()
		}

		если вариативный {
			парам.Т = асд.ТипВариативный{
				поз: вари-поз,
				Т-элемента: парам.Т,
			}
		}

		тф.параметры.добавить(парам)

		если п.лек = лексер.КРУГ-П {
			прервать
		}
		п.нужна лексема(лексер.ЗАПЯТАЯ)
	}

/*!!!
	пока i, p := range ft.Params {
		если асд.IsVariadicType(p.Typ) & i # len(ft.Params)-1 {
			env.AddError(p.Pos, "ПАР-МЕСТО-ВАРИАДИК")
		}
	}
*/
}
