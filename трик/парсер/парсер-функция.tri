модуль парсер

импорт "стд::вывод"
импорт "трик/асд"
импорт "трик/лексер"
импорт "трик/основа"

фн (п: Парсер) описание функции(): асд.Функция {
/*
	пусть n = &асд.Function{
		DeclBase: асд.ОписаниеBase{Pos: п.поз},
	}

	п.нужна лексема(лексер.FN)

	если п.лек = лексер.КРУГ-Л { //receiver
		п.взять()

		n.Recv = &асд.Param{
			DeclBase: асд.ОписаниеBase{Pos: п.поз},
		}

		n.Recv.Name = п.идент()
		п.нужна лексема(лексер.ДВОЕТОЧИЕ)
		n.Recv.Typ = п.указание-типа()

		п.нужна лексема(лексер.КРУГ-П)
	}

	n.Pos = п.поз // ident pos
	n.Name = п.идент()

	если п.parseExportMark() {
		n.Exported = истина
	}

	n.Typ = п.parseFuncType()

	если п.лек = лексер.MODIFIER {
		пусть mod = п.parseModеслиier()

		выбор mod.Name {
		когда "@внеш":
			n.External = истина

		другое
			п.ошибка(п.поз, "ПАР-ОШ-МОДИФИКАТОР", mod.Name)
		}

		n.Mod = mod
	} иначе {
		n.Seq = п.parseStatementSeq()
	}

*/    
	вернуть асд.Функция{
        поз: 0,
        список: асд.СписокОператоров{поз: 0}
    }
}

/*
фн (п: Парсер) parseFuncType(): асд.FuncType {
	если п.отладка {
		defer un(trace(p, "Тип функции"))
	}

	пусть ft = &асд.FuncType{
		TypeBase: асд.ТипBase{Pos: п.поз},
	}

	п.нужна лексема(лексер.КРУГ-Л)

	p.parseParameters(ft)

	п.нужна лексема(лексер.КРУГ-П)

	если п.лек = лексер.ДВОЕТОЧИЕ {
		п.взять()
		ft.ReturnTyp = п.указание-типа()
	}

	вернуть ft
}

пусть skipToParam = tokens{
	лексер.КОН-ФАЙЛ: истина,

	лексер.КРУГ-П:  истина,
	лексер.ЗАПЯТАЯ: истина,
}

фн (п: Парсер) parseParameters(ft *асд.FuncType) {

	пока п.лек # лексер.КРУГ-П & п.лек # лексер.КОН-ФАЙЛ {

		пусть param = &асд.Param{
			DeclBase: асд.ОписаниеBase{Pos: п.поз},
		}

		param.Name = п.идент()

		п.нужна лексема(лексер.ДВОЕТОЧИЕ)

		пусть пустьiadic = п.лек = лексер.ТРОЕТОЧИЕ
		пусть пустьiadic_pos = п.поз
		если пустьiadic {
			п.взять()
		}

		если п.лек = лексер.УМНОЖИТЬ {
			param.Typ = асд.TagPairType
			п.взять()

		} иначе {
			param.Typ = п.указание-типа()
		}

		если пустьiadic {
			param.Typ = &асд.VariadicType{
				TypeBase:   асд.ТипBase{Pos: пустьiadic_pos},
				ElementTyp: param.Typ,
			}
		}

		ft.Params = append(ft.Params, param)

		если п.лек = лексер.КРУГ-П {
			прервать
		}
		п.нужна лексема(лексер.ЗАПЯТАЯ)
	}

	пока i, p := range ft.Params {
		если асд.IsVariadicType(p.Typ) & i # len(ft.Params)-1 {
			env.AddError(p.Pos, "ПАР-МЕСТО-ВАРИАДИК")
		}
	}

}
*/
