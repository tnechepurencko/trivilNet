модуль парсер

импорт "стд::вывод"
//импорт "стд::строки"
//импорт "стд::юникод/utf8"

импорт "трик/асд"
//импорт "трик/основа"


фн подготовить строковый литерал(с: Строка): асд.Символы {

    пусть рез = асд.Символы[]
    пусть исх = с(:асд.Символы)
    пусть № := 0
    пусть эск := ложь
    пока № < длина(исх) {
        
        выбор {
        когда эск:
            пусть сим := исх[№]
            выбор сим {
            когда 'u':
                №++
                пусть код := 0x0
                пусть граница := № + 4
                пока № < граница {
                    код := код * 0x10 + цифра16(исх[№])
                    №++
                }
                //вывод.ф("!код $ш;\n", код)
                сим := код(:Символ)
            когда '\\':  
                сим := '\\'
                №++
            когда 'n':  
                сим := '\n'
                №++
            когда 'r':  
                сим := '\r'
                №++
            когда 't':  
                сим := '\t'
                №++
            другое 
                №++
            }
            рез.добавить(сим)
        когда исх[№] = '\\':
            эск := истина
            №++
        другое
            рез.добавить(исх[№])
            №++
        }
    }
    вернуть рез
}

фн цифра16(сим: Символ): Слово64 {
    выбор {
    когда сим >= '0' & сим <= '9': 
        вернуть сим(:Слово64) - '0'(:Слово64)
    когда сим >= 'A' & сим <= 'F':
        вернуть 0xA + сим(:Слово64) - 'A'(:Слово64)
    когда сим >= 'a' & сим <= 'f':
        вернуть 0xA + сим(:Слово64) - 'f'(:Слово64)
    другое 
        вернуть 16
    }
}

