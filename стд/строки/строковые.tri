модуль строки
осторожно

// Построить строку по формату
фн ф*(формат: Строка, аргументы: ...*): Строка {
    пусть сб = Сборщик{}
    сб.ф(формат, аргументы...)
    вернуть сб.строка()
}

//==== сборка

фн соединить*(разделитель: Строка, строки: ...Строка): Строка {

    надо длина(строки) > 0 иначе вернуть ""

    пусть размер := 0
    пусть № := 0
    пока № < длина(строки) {
        размер := размер + длина(строки[№](:осторожно Строка8))
        №++
    }
    размер := размер + (длина(строки) -1)* длина(разделитель(:осторожно Строка8))

    пусть сб = Сборщик{байты: Байты[выделить: размер]}
    № := 0
    пока № < длина(строки) - 1 {
        сб.добавить строку(строки[№])
        сб.добавить строку(разделитель)
        №++
    }
    сб.добавить строку(строки[№])

    вернуть сб.строка()
}

//==== анализ строки

// Возвращает истину, если строка начинается с префикса
фн префикс?(с: Строка, префикс: Строка): Лог {
    пусть с8 = с(:осторожно Строка8)
    пусть п8 = префикс(:осторожно Строка8)

    надо длина(п8) <= длина(с8) иначе вернуть ложь
    
    пусть № := 0
    пока № < длина(п8) {
        если с8[№] # п8[№] { вернуть ложь }
        №++
    }
    вернуть истина
}

// Возвращает истину, если строка заканчивается суффиксом
фн суффикс?(с: Строка, суффикс: Строка): Лог {
    пусть с8 = с(:осторожно Строка8)
    пусть к8 = суффикс(:осторожно Строка8)

    надо длина(к8) <= длина(с8) иначе вернуть ложь
    
    пусть №1 := длина(к8) - 1
    пусть №2 := длина(с8) - 1
    пока №1 >= 0 {
        если с8[№2] # к8[№1] { вернуть ложь }
        №1--
        №2--
    }
    вернуть истина
}

