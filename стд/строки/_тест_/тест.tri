модуль строки

импорт "стд::тестирование/тест-основа"

фн Тестировать*(т: тест-основа.Основа) {
    т.тест("префикс 1", префикс?("привет", "при"))
    т.тест("префикс 2", ~ префикс?("привет", "пре"))

    т.тест("суффикс 1", суффикс?("привет", "вет"))
    т.тест("суффикс 2", ~ суффикс?("привет", "ват"))

    т-соединить(т)
}

//==== соединить ====

тип ТСтроки = []Строка
тип Один-соединить = класс {
    раз = ""
    арг: ТСтроки = позже
    отв: Строка = позже
}
тип Все-соединить = []Один-соединить 

пусть тесты-соединить = Все-соединить[
    Один-соединить{раз: "", арг: ТСтроки[""], отв: ""},
    Один-соединить{раз: "ф", арг: ТСтроки[""], отв: ""},
    Один-соединить{раз: "ф", арг: ТСтроки["ы"], отв: "ы"},
    Один-соединить{раз: "ф", арг: ТСтроки["ы", ""], отв: "ыф"},
    Один-соединить{раз: "+", арг: ТСтроки["ы", "ы"], отв: "ы+ы"},
    Один-соединить{раз: "++", арг: ТСтроки["ыы", "цц"], отв: "ыы++цц"},
]

фн т-соединить(т: тест-основа.Основа) {

    пусть № := 0
    пока № < длина(тесты-соединить) {

        пусть в = тесты-соединить [№]
        пусть ответ = соединить(в.раз, в.арг...)
        
        если ответ = в.отв  { 
            т.успех(ф("соединить %v", №))
        } иначе {
            т.ошибка(ф("соединить %v", №), "'%v' # '%v'", ответ, в.отв)
        }
   
        №++
    }
}