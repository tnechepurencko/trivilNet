модуль строки

импорт "стд::юникод"

конст макс-Цел64 = 0x7FFFFFFFFFFFFFFF(:Цел64)

// Извлекает целое число из строки, возвращает истину, если удалось
// формат: ('+' | '-')? цифра10+
фн строка в цел*(с: Строка, рез := Цел64): Лог {
    рез := 0
    
    пусть с8 = с(:Строка8)
    надо длина(с8) > 0 иначе вернуть ложь

    пусть № := 0
    пусть нег = с8[0] =  '-'(:Байт)
    если нег | с8[0] =  '+'(:Байт) {
        №++
        надо № < длина(с8) иначе вернуть ложь
    }
    
    пусть сим := с8[№](:Символ)
    надо юникод.цифра?(сим) иначе вернуть ложь

    пусть число := 0
    пока истина {
        пусть цифра = сим(:Цел64) - '0'(:Цел64)
        
        // проверка выхода за границу
        надо число <= (макс-Цел64 - цифра) / 10 иначе вернуть ложь
        
        число := число*10 + цифра
        №++
        если № >= длина(с8) { 
            если нег {
                число := - число
            }
            рез := число
            вернуть истина
        }
        сим := с8[№](:Символ)

        надо юникод.цифра?(сим) иначе прервать
    }
    вернуть ложь
}

// Извлекает беззнаковое целое число из строки, возвращает истину, если удалось
// формат: 0x цифра16+ | цифра10+
фн строка в слово*(с: Строка, рез := Слово64): Лог {
    вернуть ложь

}