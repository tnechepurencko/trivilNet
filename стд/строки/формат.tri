модуль строки

тип Символы = []Символ

тип Разборщик = класс {
    сб: Сборщик = позже
    формат: Символы = позже 
    №-сим := 0
    кол-во := 0
}

фн (сб: Сборщик) ф*(фс: Строка, список: ...*) {

    пусть р = Разборщик{сб: сб, формат: фс(:Символы) }  
    р.кол-во := длина(р.формат)
    пусть №-арг := 0
    пока р.следующий() {
        если №-арг >= длина(список) {
            авария("не достаточно аргументов")
        }
        сб.добавить(р, тег(список[№-арг]), нечто(список[№-арг]))
        №-арг++
    }
    если №-арг < длина(список) {
        авария("слишком много аргументов")
    }
}

фн (сб: Сборщик) добавить(р: Разборщик, Т: Слово64, Х: Слово64) {}

фн (р: Разборщик) следующий(): Лог {
    пока р.№-сим < р.кол-во {
        если р.формат[р.№-сим] = '%' {
            р.задание()
            вернуть истина
        } иначе {
            р.сб.добавить символ(р.формат[р.№-сим])
        }    
        
        р.№-сим++
    }
    вернуть ложь
}

фн (р: Разборщик) задание() {
    авария("не") 
}
