модуль utf8


конст Ош-символ = '\uFFFD'

тип Байты = []Байт

тип Декодер = класс {
    байты: Байты = позже
    №* := 0
    //==== результаты декодирования
    //последний* := Ош-символ
    число-байтов* := 0
}

фн декодер*(б: Байты): Декодер {
    вернуть Декодер{байты: б}
}

фн (д: Декодер) символ*(): Символ {

    д.число-байтов := 0

    надо д.№ < длина(д.байты) иначе вернуть Ош-символ
    
    пусть тек = д.байты[д.№]
    д.№++
        
    если тек < 0x80(:Байт) {
        д.число-байтов := 1
        вернуть тек(:Символ)
    }
    
    // Первый байт должен быть в диапазоне [0xc2..0xf4]
    надо тек >=  0xc2(:Байт) | тек <= 0xf4(:Байт) иначе вернуть Ош-символ
    
    если тек < 0xe0(:Байт) { // 2-х байтовая последовательность
        надо д.№ < длина(д.байты) иначе вернуть Ош-символ
        пусть тек1 = д.байты[д.№]
        д.№++       
        надо тек1 :& 0xc0(:Байт) = 0x80(:Байт) иначе вернуть Ош-символ
        
        д.число-байтов := 1
        вернуть ((тек(:Слово64) :& 0x1f) << 6 :| тек1(:Слово64) :& 0x3f)(:Символ)
    
    
    }
    
    
    
    вернуть Ош-символ
}
